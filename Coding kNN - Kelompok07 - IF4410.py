# -*- coding: utf-8 -*-
"""Coding KNN_KELOMPOK7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WkNTPgpfUHII9lnsH4liWHSCgPX-z4Vk

KELOMPOK 7 - IF-44-10


*   Berlian Muhammad Galin Al Awienoor	(1301204378)

*   Kiki Dwi Prasetyo				 	(1301204027)
"""

!pip install xlsxwriter

import xlsxwriter
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import math
import time
from statistics import mean

#import data train dari traintest.xlsx
dfTrain = pd.read_excel("https://github.com/berlianm/k-Nearest-Neighbors/blob/main/traintest.xlsx?raw=true", sheet_name='train')
dfTrain

#import data test dari traintest.xlsx
dfTest = pd.read_excel("https://github.com/berlianm/k-Nearest-Neighbors/blob/main/traintest.xlsx?raw=true", sheet_name='test')
dfTest

dfTrain.describe()

dfTest.describe()

#menampilkan data train sebelum normalisasi (boxplot)
sns.set_theme(style="darkgrid")
ax = sns.boxplot(data=dfTrain[['x1', 'x2', 'x3']], orient="v", palette="Set1")
sns.set(rc={'figure.figsize':(8, 8)})
ax.set_xticklabels(['x1', 'x2', 'x3'])
plt.title('DATA TRAIN SEBELUM NORMALISASI')

#normalisasi data train (min-maks scaling)
df_train_normalisasi = pd.DataFrame(index=dfTrain.index, columns=dfTrain.columns)

xMaks = dfTrain["x1"].max()
xMin  = dfTrain["x1"].min()

for i in range(len(dfTrain)):
    x = dfTrain["x1"][i]
    xBaru = (x - xMin) / (xMaks - xMin)
    df_train_normalisasi["x1"][i] = xBaru

xMaks = dfTrain["x2"].max()
xMin  = dfTrain["x2"].min()

for i in range(len(dfTrain)):
    x = dfTrain["x2"][i]
    xBaru = (x - xMin) / (xMaks - xMin)
    df_train_normalisasi["x2"][i] = xBaru

xMaks = dfTrain["x3"].max()
xMin  = dfTrain["x3"].min()

for i in range(len(dfTrain)):
    x = dfTrain["x3"][i]
    xBaru = (x - xMin) / (xMaks - xMin)
    df_train_normalisasi["x3"][i] = xBaru

df_train_normalisasi['x1'] = df_train_normalisasi['x1'].astype(float)
df_train_normalisasi['x2'] = df_train_normalisasi['x2'].astype(float)
df_train_normalisasi['x3'] = df_train_normalisasi['x3'].astype(float)
df_train_normalisasi['y']  = dfTrain['y']
df_train_normalisasi['id'] = dfTrain['id']
df_train_normalisasi

#menampilkan data train sesudah normalisasi (boxplot)
sns.set_theme(style="darkgrid")
ax = sns.boxplot(data=df_train_normalisasi[['x1', 'x2', 'x3']], orient="v", palette="Set1")
sns.set(rc={'figure.figsize':(8, 8)})
ax.set_xticklabels(['x1', 'x2', 'x3'])
plt.title('DATA TRAIN SETELAH NORMALISASI')

#menampilkan data test sebelum normalisasi (boxplot)
sns.set_theme(style="darkgrid")
ax = sns.boxplot(data=dfTest[['x1', 'x2', 'x3']], orient="v", palette="Set1")
sns.set(rc={'figure.figsize':(8, 8)})
ax.set_xticklabels(['x1', 'x2', 'x3'])
plt.title('DATA TEST SEBELUM NORMALISASI')

#normalisasi data test (min-maks scaling)
df_test_normalisasi = pd.DataFrame(index=dfTest.index, columns=dfTest.columns)

xMaks = dfTest["x1"].max()
xMin  = dfTest["x1"].min()

for i in range(len(dfTest)):
    x = dfTest["x1"][i]
    xBaru = (x - xMin) / (xMaks - xMin)
    df_test_normalisasi["x1"][i] = float(xBaru)

xMaks = dfTest["x2"].max()
xMin  = dfTest["x2"].min()

for i in range(len(dfTest)):
    x = dfTest["x2"][i]
    xBaru = (x - xMin) / (xMaks - xMin)
    df_test_normalisasi["x2"][i] = float(xBaru)

xMaks = dfTest["x3"].max()
xMin  = dfTest["x3"].min()

for i in range(len(dfTest)):
    x = dfTest["x3"][i]
    xBaru = (x - xMin) / (xMaks - xMin)
    df_test_normalisasi["x3"][i] = float(xBaru)

df_test_normalisasi['x1'] = df_test_normalisasi['x1'].astype(float)
df_test_normalisasi['x2'] = df_test_normalisasi['x2'].astype(float)
df_test_normalisasi['x3'] = df_test_normalisasi['x3'].astype(float)
df_test_normalisasi['id'] = dfTest['id'].astype(str)
df_test_normalisasi['y'] = dfTest['y']
df_test_normalisasi

#menampilkan data test sebelum normalisasi (boxplot)
sns.set_theme(style="darkgrid")
ax = sns.boxplot(data=df_test_normalisasi[['x1', 'x2', 'x3']], orient="v", palette="Set1")
sns.set(rc={'figure.figsize':(8, 8)})
ax.set_xticklabels(['x1', 'x2', 'x3'])
plt.title('DATA TEST SETELAH NORMALISASI')

start_time_kNN = time.time()

#metode Eucledian
def Euclidean(df_train_normalisasi, test):
    result = []
    for i in range(len(df_train_normalisasi)):
        jarak_x = math.sqrt((((df_train_normalisasi['x1'][i] - test['x1']) ** 2) +
                             ((df_train_normalisasi['x2'][i] - test['x2']) ** 2) + 
                             ((df_train_normalisasi['x3'][i] - test['x3']) ** 2)))
        result.append([jarak_x, df_train_normalisasi['y'][i]])

    return result

#metode Manhattan
def Manhattan(df_train_normalisasi, test):
    result = []
    for i in range(len(df_train_normalisasi)):
        jarak = (abs(df_train_normalisasi['x1'][i] - test['x1']) + 
                 abs(df_train_normalisasi['x2'][i] - test['x2']) + 
                 abs(df_train_normalisasi['x3'][i] - test['x3']))
        result.append([jarak , df_train_normalisasi['y'][i]])

    return result

#memanggil fungsi Euclidean (sorting, k data teratas, melakukan label vote)
def kNN_Euclidean(df_train_normalisasi, df_test_normalisasi, k):
    hasil = []

    for i in range(len(df_test_normalisasi)):
        jarak = Euclidean(df_train_normalisasi, df_test_normalisasi.iloc[[i]])
        jarak = sorted(jarak, key=lambda x:x[0])
        jarak_K = jarak[:k]
        y_satu = 0 
        y_nol = 0 

        for j in range(k):
            if jarak_K[j][1] == 1:
                y_satu += 1
            else:
                y_nol += 1

        if y_satu > y_nol:
            hasil.append([df_test_normalisasi.loc[i, 'id'], 1])
        else:
            hasil.append([df_test_normalisasi.loc[i, 'id'], 0])
            
    df_Hasil = pd.DataFrame(hasil, columns = ['id', 'y'])

    return df_Hasil

#memanggil fungsi Manhattan (sorting, k data teratas, melakukan label vote)
def kNN_Manhattan(df_train_normalisasi, df_test_normalisasi, k):
    hasil = []
    for i in range(len(df_test_normalisasi)):
        jarak = Manhattan(df_train_normalisasi, df_test_normalisasi.iloc[i])
        jarak = sorted(jarak, key=lambda x:x[0])
        jarak_K = jarak[:k]
        y_satu = 0 
        y_nol = 0  

        for j in range(k):
            if jarak_K[j][1] == 1:
                y_satu += 1
            else:
                y_nol += 1

        if y_satu > y_nol:
            hasil.append([df_test_normalisasi.loc[i, 'id'], 1])
        else:
            hasil.append([df_test_normalisasi.loc[i, 'id'], 0])
            
    df_Hasil = pd.DataFrame(hasil, columns = ['id', 'y'])

    return df_Hasil

def kNN(df_train_normalisasi, df_test_normalisasi, k):
    return {
        'manhattan' : kNN_Manhattan(df_train_normalisasi, df_test_normalisasi, k), 
        'euclidean' : kNN_Euclidean(df_train_normalisasi, df_test_normalisasi, k) 
    }

def validasi(df_train_normalisasi, k):
    #fold1
    test_fold1  = df_train_normalisasi.iloc[:59].drop('y', axis = 1)
    train_fold1 = df_train_normalisasi.iloc[59:].reset_index().drop('index', axis = 1)
   
    #fold2
    test_fold2  = df_train_normalisasi.iloc[59:118].drop('y', axis = 1).reset_index().drop('index', axis = 1)
    train_fold2 = pd.concat([df_train_normalisasi.iloc[:59], df_train_normalisasi.iloc[118:]]).reset_index().drop('index', axis = 1)
   
    #fold3
    test_fold3  = df_train_normalisasi.iloc[118:177].drop('y', axis = 1).reset_index().drop('index', axis = 1)
    train_fold3 = pd.concat([df_train_normalisasi.iloc[:118], df_train_normalisasi.iloc[177:]]).reset_index().drop('index', axis = 1)
   
    #fold4
    test_fold4  = df_train_normalisasi.iloc[177:236].drop('y', axis = 1).reset_index().drop('index', axis = 1)
    train_fold4 = pd.concat([df_train_normalisasi.iloc[:177], df_train_normalisasi.iloc[236:]]).reset_index().drop('index', axis = 1)
   
    #fold5
    test_fold5  = df_train_normalisasi.iloc[236:295].drop('y', axis = 1).reset_index().drop('index', axis = 1)
    train_fold5 = df_train_normalisasi.iloc[0:236].reset_index().drop('index', axis = 1)
    
    #hasil validasi
    hasil_fold1  = kNN(train_fold1, test_fold1, k)
    hasil_fold2  = kNN(train_fold2, test_fold2, k)
    hasil_fold3  = kNN(train_fold3, test_fold3, k)
    hasil_fold4  = kNN(train_fold4, test_fold4, k)
    hasil_fold5  = kNN(train_fold5, test_fold5, k)
    akurasi = []

    valid = 0
    #fold 1
    for i in range(len(hasil_fold1['euclidean'])):
        if hasil_fold1['euclidean']['y'][i] == df_train_normalisasi['y'][i]:
            valid += 1
    akurasi_fold = valid / len(hasil_fold1['euclidean'])
    akurasi.append(akurasi_fold)

    valid = 0
    #fold 2
    for i in range(len(hasil_fold1['euclidean'])):
        if hasil_fold2['euclidean']['y'][i] == df_train_normalisasi.iloc[59:118]['y'][i+59]:
            valid += 1
    akurasi_fold = valid / len(hasil_fold1['euclidean'])
    akurasi.append(akurasi_fold)

    valid = 0
    #fold 3
    for i in range(len(hasil_fold1['euclidean'])):
        if hasil_fold3['euclidean']['y'][i] == df_train_normalisasi.iloc[118:177]['y'][i+118]:
            valid += 1
    akurasi_fold = valid / len(hasil_fold1['euclidean'])
    akurasi.append(akurasi_fold)   

    valid = 0
    #fold 4
    for i in range(len(hasil_fold1['euclidean'])):
        if hasil_fold4['euclidean']['y'][i] == df_train_normalisasi.iloc[177:236]['y'][i+177]:
            valid += 1
    akurasi_fold = valid / len(hasil_fold1['euclidean'])
    akurasi.append(akurasi_fold)

    valid = 0
    #fold 5
    for i in range(len(hasil_fold1['euclidean'])):
        if hasil_fold5['euclidean']['y'][i] == df_train_normalisasi.iloc[236:295]['y'][i+236]:
            valid += 1
    akurasi_fold = valid / len(hasil_fold1['euclidean'])
    akurasi.append(akurasi_fold)

    
    return akurasi

# Hasil validasi #1
print(validasi(df_train_normalisasi, k=5))
print("hasil validasi dengan k=5")
plt.plot(validasi(df_train_normalisasi, k= 5))

# Hasil validasi #2
print(validasi(df_train_normalisasi, k=9))
print("hasil validasi dengan k=9")
plt.plot(validasi(df_train_normalisasi, k= 9))

# Hasil validasi #3
print(validasi(df_train_normalisasi, k=15))
print("hasil validasi dengan k=15")
plt.plot(validasi(df_train_normalisasi, k= 15))

# Hasil validasi #4
print(validasi(df_train_normalisasi, k=19))
print("hasil validasi dengan k=19")
plt.plot(validasi(df_train_normalisasi, k= 19))

# Hasil validasi #5
print(validasi(df_train_normalisasi, k=25))
print("hasil validasi dengan k=25")
plt.plot(validasi(df_train_normalisasi, k= 25))

# pemanggilan fungsi kNN untuk mendapatkan hasil kNN dari manhattan dan euclidean
kNN = kNN(df_train_normalisasi, df_test_normalisasi, k=15)

# akhir run program kNN
kNN_time = time.time() - start_time_kNN

kNN['euclidean']

kNN['manhattan']

print("PROSES SELESAI DENGAN WAKTU %s DETIK" % kNN_time)